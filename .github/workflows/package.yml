# description of this workflow, can be anything you want
name: Package and release

# we need to let GitHub know _when_ we want to release, typically only when we create a new tag.
# this will target only tags, and not all pushes to the master branch.
# this part can be heavily customized to your liking, like targeting only tags that match a certain word,
# other branches or even pullrequests.
on:
  push:
#    tags:
#      - '**'

# a workflow is built up as jobs, and within these jobs are steps
jobs:

  # "release" is a job, you can name it anything you want
  release:

    # we can run our steps on pretty much anything, but the "ubuntu-latest" image is a safe bet
    runs-on: ubuntu-latest

    # specify the environment variables used by the packager, matching the secrets from the project on GitHub
    env:
      CF_API_KEY: ${{ secrets.CF_API_KEY }}
      WOWI_API_TOKEN: ${{ secrets.WOWI_API_TOKEN }}
      WAGO_API_TOKEN: ${{ secrets.WAGO_API_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_OAUTH: ${{ secrets.GITHUB_TOKEN }}

    steps:

      # we first have to clone the AddOn project, this is a required step
      - name: Clone project
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # gets entire git history, needed for automatic changelogs

      - name: Get Retail Version Number
        id: vnum
        run: |-
          echo "VERSION_NUMBER=$(curl -s "https://blizztrack.com/api/manifest/wow/versions" | jq -r '.result.data[0].version_name')" > $GITHUB_OUTPUT

      - name: Get Retail TOC
        id: vtoc
        run: |-
          echo "VERSION_TOC=$(curl -s "https://blizztrack.com/api/manifest/wow/versions" | jq -r '.result.data[0].version_name' | sed 's![^.]*$!!' | sed 's/\./0/g' | sed 's/.$//')" > $GITHUB_OUTPUT
      
          
      - name: Generate release tag
        id: generate_release_tag
        uses: alexvingg/next-release-tag@v1.0.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: ${{steps.vtoc.outputs.VERSION_TOC}}.

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.generate_release_tag.outputs.release_tag }}
          release_name: ${{ steps.generate_release_tag.outputs.release_tag }}

      # once cloned, we just run the GitHub Action for the packager project
      - name: Package and Deploy
        uses: BigWigsMods/packager@v2
        with:
          args: -p 0 -w 0 -a 0

      # cleanup
      - name: Delete old Releases, keep 3
        uses: dev-drprasad/delete-older-releases@v0.3.2
        with:
          keep_latest: 3
          delete_tags: true